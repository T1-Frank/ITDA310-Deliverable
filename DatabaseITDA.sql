-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
SHOW WARNINGS;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`CommunityHealthcareWorker`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`CommunityHealthcareWorker` (
  `idChw` INT NOT NULL AUTO_INCREMENT COMMENT 'An autogenerated unique integer used identify each instance of CommunityHealthcareWorker',
  `fName` VARCHAR(45) NOT NULL COMMENT 'The first name of the healthcare worker',
  `sName` VARCHAR(45) NOT NULL COMMENT 'The surname of the healthcare worker',
  `phoneNo` VARCHAR(45) NOT NULL COMMENT 'The phone number of the healthcare worker',
  `email` VARCHAR(45) NOT NULL COMMENT 'The email of the healthcare worker',
  PRIMARY KEY (`idChw`),
  UNIQUE INDEX `idChw_UNIQUE` (`idChw` ASC) VISIBLE,
  UNIQUE INDEX `phoneNo_UNIQUE` (`phoneNo` ASC) VISIBLE,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Patient`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Patient` (
  `idNumber` CHAR(13) NOT NULL COMMENT 'The South African ID number of the patient, used as a primary key as each person in South Africa has a unique ID number and this number is needed by the hospital to keep record of patients.',
  `fName` VARCHAR(45) NOT NULL COMMENT 'The first name of the the patient',
  `sName` VARCHAR(45) NOT NULL COMMENT 'The surname of the patient',
  `phoneNumber` VARCHAR(13) NULL COMMENT 'The patients preferred contact number',
  `email` VARCHAR(60) NULL COMMENT 'The patients e-mail address',
  `Address` VARCHAR(120) NOT NULL COMMENT 'The patients residential address',
  `nextOfKin` CHAR(13) NULL COMMENT 'A foreign key for the patients next of kin in case of emergencies (set to Cascade on update and Delete)',
  `gender` CHAR(1) NOT NULL COMMENT 'The patients biological gender',
  `Pchw` INT NULL COMMENT 'a foreign key of the patients assigned community healthcare worker if applicable (set to No Action on Delete and Cascade on update)',
  PRIMARY KEY (`idNumber`),
  UNIQUE INDEX `IDno_UNIQUE` (`idNumber` ASC) VISIBLE,
  INDEX `PnextOfKin_idx` (`nextOfKin` ASC) VISIBLE,
  INDEX `Pchw_idx` (`Pchw` ASC) VISIBLE,
  CONSTRAINT `PnextOfKin`
    FOREIGN KEY (`nextOfKin`)
    REFERENCES `mydb`.`Patient` (`idNumber`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `Pchw`
    FOREIGN KEY (`Pchw`)
    REFERENCES `mydb`.`CommunityHealthcareWorker` (`idChw`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Clinician`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Clinician` (
  `idClinician` INT NOT NULL AUTO_INCREMENT COMMENT 'an autogenerated integer which uniquely identifies the clinician',
  `fName` VARCHAR(45) NOT NULL COMMENT 'the clinicians first name',
  `sName` VARCHAR(45) NOT NULL COMMENT 'the clinician\'s surname',
  PRIMARY KEY (`idClinician`),
  UNIQUE INDEX `idClinician_UNIQUE` (`idClinician` ASC) VISIBLE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Visit`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Visit` (
  `idVisit` INT NOT NULL AUTO_INCREMENT COMMENT 'A auto generated numeric unique Identifier for each visit. This is used to uniquely identify every visit',
  `examined` TINYINT NOT NULL DEFAULT 0 COMMENT 'a boolean yes (1) or no (0) for whether the patient has been examined this visit',
  `tested` TINYINT NOT NULL DEFAULT 0 COMMENT 'a boolean yes (1) or no (0) for whether the patient has been tested this visit',
  `time` DATETIME NOT NULL COMMENT 'The time and date that the visit is sheduled for',
  `completed` TINYINT NOT NULL DEFAULT 0 COMMENT 'a boolean yes (1) or no (0) for whether the visit has been completed',
  `type` VARCHAR(255) NOT NULL COMMENT 'A descriptor for the type of visit written by the receptionist/clinician when the visit is scheduled',
  `Vmissed` TINYINT NOT NULL DEFAULT 0 COMMENT 'a boolean yes (1) or no (0) for whether the patient has missed their visit',
  `VclinicianID` INT NOT NULL COMMENT 'a foreign key which uniquely identifies which clinician is assigned to the visit (set to No Action on Delete and Cascade on update)',
  `VpatientID` CHAR(13) NOT NULL COMMENT 'a foreign key which uniquely identifies which patient is due for this visit. (set to No Action on Delete and Cascade on update)',
  PRIMARY KEY (`idVisit`),
  INDEX `VisitPID_idx` (`VpatientID` ASC) VISIBLE,
  INDEX `VisitCID_idx` (`VclinicianID` ASC) VISIBLE,
  UNIQUE INDEX `idVisit_UNIQUE` (`idVisit` ASC) VISIBLE,
  CONSTRAINT `VisitPID`
    FOREIGN KEY (`VpatientID`)
    REFERENCES `mydb`.`Patient` (`idNumber`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `VisitCID`
    FOREIGN KEY (`VclinicianID`)
    REFERENCES `mydb`.`Clinician` (`idClinician`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Test`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Test` (
  `idTest` INT NOT NULL AUTO_INCREMENT COMMENT 'an autogenerated unique integer to uniquely identify each instance of test',
  `type` VARCHAR(255) NOT NULL COMMENT 'A descriptor that outlines the type of test performed.',
  `date` DATETIME NULL COMMENT 'the date and time that the test was undertaken',
  `results` VARCHAR(255) NULL COMMENT 'the results of the test',
  `visitID` INT NOT NULL COMMENT 'a foreign key which links the test to which visit it was authorized from. (set to No Action on Delete and Cascade on update)',
  PRIMARY KEY (`idTest`),
  INDEX `TvisitID_idx` (`visitID` ASC) VISIBLE,
  UNIQUE INDEX `idTest_UNIQUE` (`idTest` ASC) VISIBLE,
  CONSTRAINT `TvisitID`
    FOREIGN KEY (`visitID`)
    REFERENCES `mydb`.`Visit` (`idVisit`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Diagnosis`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Diagnosis` (
  `idDiagnosis` INT NOT NULL AUTO_INCREMENT COMMENT 'an autogenerated integer which uniquely identifies each diagnostic instance',
  `name` VARCHAR(90) NOT NULL COMMENT 'The medical name of the diagnosis',
  `DvisitID` INT NOT NULL COMMENT 'a foreign key which links the diagnosis to a specific visit (set to No Action on Delete and Cascade on update)',
  PRIMARY KEY (`idDiagnosis`),
  INDEX `DvisitID_idx` (`DvisitID` ASC) VISIBLE,
  UNIQUE INDEX `idDiagnosis_UNIQUE` (`idDiagnosis` ASC) VISIBLE,
  CONSTRAINT `DvisitID`
    FOREIGN KEY (`DvisitID`)
    REFERENCES `mydb`.`Visit` (`idVisit`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Treatment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Treatment` (
  `idTreatment` INT NOT NULL AUTO_INCREMENT COMMENT 'An auto-generated integer to uniquely identify each treatment instance',
  `type` VARCHAR(45) NOT NULL COMMENT 'the type of treatment that is being prescribed eg. physiotherapy, medication etc.',
  `description` VARCHAR(255) NOT NULL COMMENT 'A more in-depth description of the treatment that the clinician has prescribed',
  `diagnosisID` INT NOT NULL COMMENT 'A foreign key which indentifies which diagnosis this treatment is linked to (set to No Action on Delete and Cascade on update)',
  PRIMARY KEY (`idTreatment`),
  INDEX `TdiagnosisID_idx` (`diagnosisID` ASC) VISIBLE,
  UNIQUE INDEX `idTreatment_UNIQUE` (`idTreatment` ASC) VISIBLE,
  CONSTRAINT `TdiagnosisID`
    FOREIGN KEY (`diagnosisID`)
    REFERENCES `mydb`.`Diagnosis` (`idDiagnosis`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`SystemCall`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SystemCall` (
  `idSystemCall` INT NOT NULL AUTO_INCREMENT COMMENT 'An autogenetared integer used to uniquely identify each instance of System call',
  `name` VARCHAR(45) NOT NULL COMMENT 'The name of the call system eg. MomConnect',
  `type` VARCHAR(45) NOT NULL COMMENT 'The type of system (eg. pregancy messages)',
  PRIMARY KEY (`idSystemCall`),
  UNIQUE INDEX `idSystemCall_UNIQUE` (`idSystemCall` ASC) VISIBLE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Prescription`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Prescription` (
  `idPrescription` INT NOT NULL AUTO_INCREMENT COMMENT 'An autogenerated unique identifier for each instance of prescription',
  `medication` VARCHAR(45) NOT NULL COMMENT 'The name of the medication that has been prescribed',
  `date` DATETIME NOT NULL COMMENT 'the date on which the prescription was given',
  `amount` INT NOT NULL COMMENT 'the amount of the medication that is prescribed',
  `directions` VARCHAR(60) NOT NULL COMMENT 'The directions given to the patient for how to take the medication eg. one tablet twice daily',
  `treatmentID` INT NOT NULL COMMENT 'a foreign key which identifies which treatment this prescription is linked to (set to No Action on Delete and Cascade on update)',
  `repeat` TINYINT NOT NULL DEFAULT 0 COMMENT 'a boolean yes (1) or no (0) for whether the prescription has any repeat collections. this indicates if the patient needs to collect more each month',
  `repeatno` INT NULL COMMENT 'This indicates how many repeats the patient can collect',
  `repeatsCollected` TINYINT NULL COMMENT 'a boolean yes (1) or no (0) for whether the patient has collected all repeats',
  `initialCollected` TINYINT NULL COMMENT 'a boolean yes (1) or no (0) for whether the patient has collectd the initial prescription',
  PRIMARY KEY (`idPrescription`),
  INDEX `PtreatmentID_idx` (`treatmentID` ASC) VISIBLE,
  UNIQUE INDEX `idPrescription_UNIQUE` (`idPrescription` ASC) VISIBLE,
  CONSTRAINT `PtreatmentID`
    FOREIGN KEY (`treatmentID`)
    REFERENCES `mydb`.`Treatment` (`idTreatment`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`SystemCallPatient`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`SystemCallPatient` (
  `idSystemCall` INT NOT NULL COMMENT 'This is a foreign key in an intermediate table to indicate which System Call is part of the relationship (set to Cascade on Delete and  on update)',
  `idPatient` CHAR(13) NOT NULL COMMENT 'This is a foreign key in an intermediate table to indicate which Patient is part of the relationship (set to Cascade on Delete and Cascade on update)',
  INDEX `idPatient_idx` (`idPatient` ASC) VISIBLE,
  PRIMARY KEY (`idSystemCall`, `idPatient`),
  CONSTRAINT `idPatient`
    FOREIGN KEY (`idPatient`)
    REFERENCES `mydb`.`Patient` (`idNumber`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `idSystemCall`
    FOREIGN KEY (`idSystemCall`)
    REFERENCES `mydb`.`SystemCall` (`idSystemCall`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'This is an intermediate entity between patient and system call';

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`AssessmentData`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`AssessmentData` (
  `idAssessmentData` INT NOT NULL AUTO_INCREMENT COMMENT 'Autogenerated integer to uniquely identify each assessment',
  `pID` CHAR(13) NOT NULL COMMENT 'A foreign key which indicates which patient the assessment corresponds to (set to No Action on Delete and Cascade on update)',
  `clinicalAssessment` VARCHAR(255) NOT NULL COMMENT 'A description or collection fo data from the assessment',
  PRIMARY KEY (`idAssessmentData`),
  INDEX `pID_idx` (`pID` ASC) VISIBLE,
  UNIQUE INDEX `idAssessmentData_UNIQUE` (`idAssessmentData` ASC) VISIBLE,
  CONSTRAINT `pID`
    FOREIGN KEY (`pID`)
    REFERENCES `mydb`.`Patient` (`idNumber`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`ChwTreatment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`ChwTreatment` (
  `idChwTreatment` INT NOT NULL AUTO_INCREMENT COMMENT 'an autogenerated integer used to uniquely identify each instance of chwTreatment, this is required as no other information is guaranteed to be unique',
  `chwID` INT NOT NULL COMMENT 'A foreign key which indicatees which healthcare worker administered the treatment (set to No Action on Delete and Cascade on update)',
  `patientID` CHAR(13) NOT NULL COMMENT 'A foreign key which inicates which patient the treatment was administered to (set to No Action on Delete and Cascade on update)',
  `date administered` DATETIME NOT NULL COMMENT 'The date and time at which the treatment was adminsitered',
  `type` VARCHAR(45) NOT NULL COMMENT 'The type of treatment administered',
  `name` VARCHAR(45) NOT NULL COMMENT 'The name of the treatment',
  `dosage` VARCHAR(45) NULL COMMENT 'The dosage of the treatment administered',
  INDEX `patient_idx` (`patientID` ASC) VISIBLE,
  PRIMARY KEY (`idChwTreatment`),
  UNIQUE INDEX `idChwTreatment_UNIQUE` (`idChwTreatment` ASC) VISIBLE,
  CONSTRAINT `chw`
    FOREIGN KEY (`chwID`)
    REFERENCES `mydb`.`CommunityHealthcareWorker` (`idChw`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `patient`
    FOREIGN KEY (`patientID`)
    REFERENCES `mydb`.`Patient` (`idNumber`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`HouseholdMembers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`HouseholdMembers` (
  `idHouseholdMembers` INT NOT NULL AUTO_INCREMENT COMMENT 'an autogenerated unique integer used to identify each household member that a chw inputs',
  `fName` VARCHAR(45) NOT NULL COMMENT 'the first name of the household member',
  `sName` VARCHAR(45) NOT NULL COMMENT 'the surname of the household member',
  `gender` CHAR(1) NOT NULL COMMENT 'the gender of the household member',
  `idNumber` VARCHAR(13) NULL COMMENT 'The ID number of the household member if possible to gather. can assist in seeing if certain patients are living together',
  PRIMARY KEY (`idHouseholdMembers`),
  UNIQUE INDEX `idHouseholdMembers_UNIQUE` (`idHouseholdMembers` ASC) VISIBLE,
  UNIQUE INDEX `idNumber_UNIQUE` (`idNumber` ASC) VISIBLE)
ENGINE = InnoDB;

SHOW WARNINGS;

-- -----------------------------------------------------
-- Table `mydb`.`Household`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`Household` (
  `idPatient` CHAR(13) NOT NULL COMMENT 'This is a foreign key in an intermediate table to indicate which Pateint is part of the relationship (set to cascade on Delete and Update)',
  `idMember` INT NOT NULL COMMENT 'This is a foreign key in an intermediate table to indicate which Household Member is part of the relationship (set to Cascade on update and Delete)',
  PRIMARY KEY (`idPatient`, `idMember`),
  INDEX `member_idx` (`idMember` ASC) VISIBLE,
  CONSTRAINT `patientHousehold`
    FOREIGN KEY (`idPatient`)
    REFERENCES `mydb`.`Patient` (`idNumber`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `member`
    FOREIGN KEY (`idMember`)
    REFERENCES `mydb`.`HouseholdMembers` (`idHouseholdMembers`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

SHOW WARNINGS;
USE `mydb`;

DELIMITER $$
SHOW WARNINGS$$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`SystemCallPatient_BEFORE_INSERT` BEFORE INSERT ON `SystemCallPatient` FOR EACH ROW
BEGIN
	IF new.idSystemCall NOT IN ( select SystemCall.idSystemCall FROM SystemCall WHERE (NEW.idSystemCall = SystemCall.idSystemCall)) OR new.idPatient NOT IN (SELECT Patient.idNumber FROM Patient WHERE (NEW.idPatient = Patient.idNumber)) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'One or more referenced Parent records do not exist';
    END IF;
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`SystemCallPatient_BEFORE_UPDATE` BEFORE UPDATE ON `SystemCallPatient` FOR EACH ROW
BEGIN
	IF new.idSystemCall NOT IN ( select SystemCall.idSystemCall FROM SystemCall WHERE (NEW.idSystemCall = SystemCall.idSystemCall)) OR new.idPatient NOT IN (SELECT Patient.idNumber FROM Patient WHERE (NEW.idPatient = Patient.idNumber)) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'One or more referenced Parent records do not exist';
    END IF;
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Household_BEFORE_INSERT` BEFORE INSERT ON `Household` FOR EACH ROW
BEGIN
	IF new.idPatient NOT IN ( select Patient.idNumber FROM Patient WHERE (NEW.idPatient = Patient.idNumber)) OR new.idMember NOT IN (SELECT HouseholdMembers.idHouseholdMembers FROM HouseholdMembers WHERE (NEW.idMember = HouseholdMembers.idHouseholdMembers)) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'One or more referenced Parent records do not exist';
    END IF;
END$$

SHOW WARNINGS$$
SHOW WARNINGS$$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`Household_BEFORE_UPDATE` BEFORE UPDATE ON `Household` FOR EACH ROW
BEGIN
	IF new.idPatient NOT IN ( select Patient.idNumber FROM Patient WHERE (NEW.idPatient = Patient.idNumber)) OR new.idMember NOT IN (SELECT HouseholdMembers.idHouseholdMembers FROM HouseholdMembers WHERE (NEW.idMember = HouseholdMembers.idHouseholdMembers)) THEN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'One or more referenced Parent records do not exist';
    END IF;
END$$

SHOW WARNINGS$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `mydb`.`Patient`
-- -----------------------------------------------------
START TRANSACTION;
USE `mydb`;
INSERT INTO `mydb`.`Patient` (`idNumber`, `fName`, `sName`, `phoneNumber`, `email`, `Address`, `nextOfKin`, `gender`, `Pchw`) VALUES ('9502175315080', 'Francois Etienne', 'Cloete', '0761611124', 'Francois@bookwise.co.za', '4 Rocklands Road, Beacon Bay, East London', '6803255315080', 'M', 1);
INSERT INTO `mydb`.`Patient` (`idNumber`, `fName`, `sName`, `phoneNumber`, `email`, `Address`, `nextOfKin`, `gender`, `Pchw`) VALUES ('6803255315080', 'Marius', 'Cloete', '0824596922', 'DSS@bookwise.co.za', '4 Rocklands Road, Beacon Bay, East London', '6708314613816', 'M', 1);
INSERT INTO `mydb`.`Patient` (`idNumber`, `fName`, `sName`, `phoneNumber`, `email`, `Address`, `nextOfKin`, `gender`, `Pchw`) VALUES ('6708314613816', 'Elize', 'Cloete', '0824444844', 'Elize@bookwise.co.za', '4 Rocklands Road, Beacon Bay, East London', NULL, 'F', NULL);
INSERT INTO `mydb`.`Patient` (`idNumber`, `fName`, `sName`, `phoneNumber`, `email`, `Address`, `nextOfKin`, `gender`, `Pchw`) VALUES ('9008105324023', 'Janine', 'Jonker', '0634593521', 'nini@gmail.com', '86 Cheffiled Place, Vincent, East London', '8604225316925', 'F', 2);
INSERT INTO `mydb`.`Patient` (`idNumber`, `fName`, `sName`, `phoneNumber`, `email`, `Address`, `nextOfKin`, `gender`, `Pchw`) VALUES ('8604225316925', 'Sarah', 'White', '0826459316', 'Sarah.W@gmail.com', '12 Beach Road, Nahoon', NULL, 'F', NULL);

COMMIT;

